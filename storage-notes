### HTML5 Storage   

>is based on named key/value pairs. You store data based on a named key, then you can retrieve that   
data with the same key. The named key is a string. The data can be any type supported by JavaScript,   
including strings, Booleans, integers, or floats. However, the data is actually stored as a string. If you are storing and retrieving anything other than strings, you will need to use functions like parseInt() or parseFloat() to coerce your retrieved data into the expected JavaScript datatype.
interface Storage {  
  getter any getItem(in DOMString key);  
  setter creator void setItem(in DOMString key, in any data);  
};  
Calling setItem() with a named key that already exists will silently overwrite the previous value.  
Calling getItem() with a non-existent key will return null rather than throw an exception.  

>Like other JavaScript objects, you can treat the localStorage object as an associative array.
Instead of using the getItem() and setItem() methods, you can simply use square brackets.  
For example, this snippet of code:  

>var foo = localStorage.getItem("bar");  
// ...  
localStorage.setItem("bar", foo);  
…could be rewritten to use square bracket syntax instead:  

>var foo = localStorage["bar"];  
// ...  
localStorage["bar"] = foo;  
There are also methods for removing the value for a given named key, and clearing the entire   
storage area (that is, deleting all the keys and values at once).  

>interface Storage {  
  deleter void removeItem(in DOMString key);  
  void clear();  
};  
Calling removeItem() with a non-existent key will do nothing.  

>Finally, there is a property to get the total number of values in the storage area, and to iterate   
through all of the keys by index (to get the name of each key).  

>interface Storage {  
  readonly attribute unsigned long length;  
  getter DOMString key(in unsigned long index);  
};  
If you call key() with an index that is not between 0–(length-1), the function will return null.  

### LIMITATIONS IN CURRENT BROWSERS

>In talking about the history of local storage hacks using third-party plugins, I made a point  
of mentioning the limitations of each technique, such as storage limits. I just realized that I  
haven’t mentioned anything about the limitations of the now-standardized HTML5 Storage. I’ll give  
you the answers first, then explain them. The answers, in order of importance, are “5 megabytes,  
” “QUOTA_EXCEEDED_ERR,” and “no.”  

>“5 megabytes” is how much storage space each origin gets by default. This is surprisingly consistent   
across browsers, although it is phrased as no more than a suggestion in the HTML5 Storage specification.  
One thing to keep in mind is that you’re storing strings, not data in its original format. If you’re  
storing a lot of integers or floats, the difference in representation can really add up. Each digit  
in that float is being stored as a character, not in the usual representation of a floating point number.  

?“QUOTA_EXCEEDED_ERR” is the exception that will get thrown if you exceed your storage quota of 5 megabytes.  
“No” is the answer to the next obvious question, “Can I ask the user for more storage space?” At     
time of writing (February 2011), no browser supports any mechanism for web developers to request more     
storage space. Some browsers (like Opera) allow the user to control each site’s storage quota, but it is
purely a user-initiated action, not something that you as a web developer can build into your web application.  




