### Object literals

>var hotel = { name: 'Park', room s: 120, booked : 77,   
c03/js/object-l iteral2.js   
checkAvailabi lity: function() { return this.rooms - this.booked; } } ;   
var elName = document .getElementByid('hotelName'); elName.textContent =hotel .name;   
var el Rooms = document .getElementByid( 'rooms') ; e1  Rooms . text Content = hote 1 . checkAvai l ability();   
Here you can see another object. Again it is called hote 1, but this time the model represents a different hotel.  
For a moment, imagine that this is a different page of the same travel website.   
The Park hotel is larger. It has 120 rooms and 77 of them are booked.     
The only things changing in the code are the values of the hot e 1 object's properties:  
• The name of the hotel • How many rooms it has • How many rooms are booked

## CREATING· OBJECTS USING LITERAL NOTATION   

>This example starts by creating an object using literal notation.   
This object is called hotel which represents a hotel called Quay with 40 rooms (25 of which have been booked).   
Next, the content of the page is updated with data from this object. It shows the name of the hotel by accessing the   
object's name property and the number of vacant rooms using the checkAvail ability() method.   
To access a property of this object, the object name is followed by a dot (the period symbol)   
and the name of the property that you want.   
Similarly, to use the method, you can use the object name followed by the method name. hotel .checkAvailability()   
If the method needs parameters, you can supply them in the parentheses (just like you can pass arguments to a function).   

## FUNCTIONS, METHODS & OBJECTS   

>c3/ j s/obj ect-1itera1 . j s   
var hotel = { name: 'Quay', rooms: 40, booked: 25, checkAvailability: function() { return this.rooms - this.booked; } } ;   
JAVASCRIPT   
var elName = document.getElementByld('hotelName'); elName.textContent =hotel .name;   
var elRooms = document.getElementByid{'rooms'); elRooms.textContent = hotel .checkAvailability();   
The Document Object Model (DOM) specifies how browsers should create a model of an HTML page and how JavaScript can access and update the contents of a web page while it is in the browser window. 
The DOM is neither part of HTML, nor part of JavaScript; it is a separate set of rules. It is implemented by all major browser makers, and covers two primary areas: 


### The Document Object Model (DOM)   

>specifies how browsers should create a model of an HTML page and how JavaScript can access   
and update the contents of a web page while it is in the browser window.   
The DOM is neither part of HTML, nor part of JavaScript; it is a separate set of rules.   
it is implemented by all major browser makers, and covers two primary areas:   
MAKING A MODEL OF THE HTML en the browser loads a web page, it creates a model of the page in memory.   
The DOM specifies the way in which the browser should structure this model using a DOM tree.   
The DOM is called an object model because the model (the DOM tree) is made of objects.   
Each object represents a different part of the page loaded in the browser window.   

## DOCUMENT OBJECT MODEL   
>ACCESSING AND CHANGING THE HTML PAGE   
The DOM also defines methods and properties to access and update each object in this model,   
which in turn updates what the user sees in the browser.    
You will hear people call the DOM an Application Programming Interface (API).  

User interfaces let humans interact with programs; APls let programs (and scripts) talk to each other.  
The DOM states what your script can "ask the browser about the current page, and how to tell the browser   
to update what is being shown to the user  

